var SIZE_4K
var SIZE_16M

var alloc_next

func alloc(n)
    var p = alloc_next
    alloc_next = alloc_next + n
    return p
end

func receive(buf, n)
    var p = 4
    *(p) = 8
    p = 5
    *(p) = buf
    p = 6
    *(p) = n
    ecall()
end

func send(buf, n)
    var p = 4
    *(p) = 9
    p = 5
    *(p) = buf
    p = 6
    *(p) = n
    ecall()
end

func str_len(s)
    var l
    while (*(s + l)) != 0
        l = l + 1
    end
    return l
end

var source_code
var bytecode

var TT_ILLEGAL
var TT_EOF
var TT_NEW_LINE
var TT_SPACE

var TT_IDENT
var TT_INT
var TT_STR

var TT_ADD
var TT_SUB
var TT_MUL
var TT_QUO
var TT_REM
var TT_AND
var TT_OR
var TT_XOR
var TT_SHL
var TT_STR
var TT_EQL
var TT_LSS
var TT_GTR
var TT_ASSIGN
var TT_NEQ
var TT_LEQ
var TT_GEQ

var TT_LPAREN
var TT_RPAREN
var TT_COMMA

var TT_WHILE
var TT_BREAK
var TT_CONTINUE
var TT_IF
var TT_ELSE
var TT_FUNC
var TT_RETURN
var TT_END
var TT_VAR

func init_token_types()
    TT_ILLEGAL = 0
    TT_EOF = 1
    TT_NEW_LINE = 2
    TT_SPACE = 3

    TT_IDENT = 4
    TT_INT = 5
    TT_STR = 6

    TT_ADD = 7
    TT_SUB = 8
    TT_MUL = 9
    TT_QUO = 10
    TT_REM = 11
    TT_AND = 12
    TT_OR = 13
    TT_XOR = 14
    TT_SHL = 15
    TT_STR = 16
    TT_EQL = 17
    TT_LSS = 18
    TT_GTR = 19
    TT_ASSIGN = 20
    TT_NEQ = 21
    TT_LEQ = 22
    TT_GEQ = 23

    TT_LPAREN = 24
    TT_RPAREN = 25
    TT_COMMA = 26

    TT_WHILE = 27
    TT_BREAK = 28
    TT_CONTINUE = 29
    TT_IF = 30
    TT_ELSE = 31
    TT_FUNC = 32
    TT_RETURN = 33
    TT_END = 34
    TT_VAR = 35
end

var temp_ret_buf

func gen_tok(src, cur_pos)
    src = src + cur_pos

    *(temp_ret_buf) = TT_ILLEGAL
    temp_ret_buf = temp_ret_buf + 1
    *(temp_ret_buf) = src
    temp_ret_buf = temp_ret_buf + 1
    *(temp_ret_buf) = 0
    temp_ret_buf = temp_ret_buf - 2

    if str_len(src) == 0
        *(temp_ret_buf) = TT_EOF
        temp_ret_buf = temp_ret_buf + 2
        *(temp_ret_buf) = 0
        temp_ret_buf = temp_ret_buf - 2
        return temp_ret_buf
    end

    if (*(src)) == 0x20
        *(temp_ret_buf) = TT_SPACE
        temp_ret_buf = temp_ret_buf + 2
        *(temp_ret_buf) = 1
        temp_ret_buf = temp_ret_buf - 2
        return temp_ret_buf
    end

    if (*(src)) == 0x0a
        *(temp_ret_buf) = TT_NEW_LINE
        temp_ret_buf = temp_ret_buf + 2
        *(temp_ret_buf) = 1
        temp_ret_buf = temp_ret_buf - 2
        return temp_ret_buf
    end
end

func init()
    alloc_next = 1024

    SIZE_4K = 4096
    SIZE_16M = 16777216

    source_code = alloc(SIZE_16M)
    bytecode = alloc(SIZE_16M)

    temp_ret_buf = alloc(SIZE_4K)

    init_token_types()
end

var a

func main()
    init()
    receive(source_code, SIZE_16M)

    gen_tok(source_code, 0)
    a = (*(temp_ret_buf))
    send(bytecode, SIZE_16M)
end
